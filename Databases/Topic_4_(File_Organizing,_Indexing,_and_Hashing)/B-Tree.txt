Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2019-10-02T14:34:31-05:00

====== B-Tree ======
Created Wednesday 02 October 2019

=== Index Structure ===
* B-Tree Index of order n
* A balanced tree
* Root has at least 2 children unless the tree has only one node
* A leaf or non-leaf node (except root) contains at least (\ciel(n/2) - 1) search key values or at most (n-1) search key values
* A non-leaf node with k children contains (k-1) search key values
{{.\node-structure.PNG?width=500}}
Where: 
K_{i} = key value
B_{i} = data pointer to the record in the main data file where search key value k_{i} is stored
P_{i} = Tree pointer (to the sub-tree)

In a B+ Tree, the non-leaf nodes do not contain data pointers (B)

=== Insertion Procedure ===
* Fill up root (level 0)
* When root is full, split it into 2 nodes at level 1
	* Keep the middle value at the root (level 0)
	* Split the rest evenly and store them in the two nodes at level 1
* If a non-root node is full, split into 2 nodes at the same level
	* move middle to parent and apply recursively if full

The sub-trees need to be balanced
If you have k values, then you have k+1 pointers to trees:
{{.\k+1-example.PNG?width=500}}]

== Example ==
Build a B-tree index of order n = 3 with the following search key valeus:
8,5,1,7,3,12,9,6,2
Min # search key values per node: \ceil(n/2) - 1 = 1
Max # search key values per node: n - 1 = 2
1. Insert 8: [B_{8} | 8] root N_{1}
2. Insert 5: [B_{5} | 5 | B_{8 }| 8] N_{1}
3. Insert 1: [+| B_{5} | 5 |+] N_{3}
	[B_{1} | 1] N_{1}          [B_{8} | 8] N_{2}
4. Insert 7: [+|5|+]
	[1]		[7 | 8]
5. Insert 3: [+|5|+]
	[1 | 3]	[7 | 8]
6. Insert 12: [+|5|+|8|+]
	[1|3]	[7]		[12]
7. Insert 9: [+|5|+|8+]
	[1|3]	[7]		[9|12]
8. Insert 6: [+|5|+|8|+]
	[1|3]	[6|7]	[9|12]
9. Insert 2: [+|5|+|8|+]
	[+|2|+]	[6|7]	[9|12]
[1]		[3]
--------Unbalanced! Fixing---------
			[+|5|+]
	[+|2|+]			[+|8|+]
[1]		[3]		[6|7]	[9|12]

=== Deletion Procedure ===
* If deleteion of value K_i in a non-leaf node causes a node to be too small
	* Move the smallest key of the sub-tree pointed to by pointer P_(i+1) to the place of K_i
* If K_i is a leaf node, then redistribute the search key values over sibling leaf nodes and adjust the pointers along the path from leaf to root
	* This may cause redistribution of search keys in non leaf nodes

== Example: ==
Given above,
Delete 6:
			[+|5|+]
	[+|2|+]			[+|8|+]
[1]		[3]		[7]		[9|12]
Delete 8:
			[+|5|+]
	[+|2|+]			[+|9|+]
[1]		[3]		[7]		[12]
